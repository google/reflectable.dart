#!/bin/bash --norc

# Copyright (c) 2015, the Dart Team. All rights reserved. Use of this
# source code is governed by a BSD-style license that can be found in
# the LICENSE file.

# This runs a `grep` command searching for TODO comments in the source
# code for the packages 'reflectable' and 'test_reflectable'. It will
# follow the rules outlined in ../reflectable/doc/todos.md in the sense
# that it is able to search for all the specified categories, it is
# able to detect that a given category is not among the ones listed in
# todos.md.

CATEGORIES="doc feature implement algorithm diagnostic clarify future"

show_section () {
  echo "---------------------------------------- $1"
}

function run_find {
  find ../reflectable ../test_reflectable . \
    \( -path '*/packages' -o -path '*/build' -prune \) -o \
    \( -name \*.dart -o -name Makefile -o -name .status \) -print
}

function run_grep {
  grep "TODO(.*) $1:" $(run_find)
}

function run_grep_all {
  for category in $CATEGORIES; do
    show_section "TODO category $category"
    run_grep "$category"
  done
}

function run_grep_unknown_category {
  selected="$(grep TODO $(run_find))"
  for category in $CATEGORIES; do
    selected="$(echo "$selected" | grep -ve "TODO(.*) $category:")"
  done
  show_section "TODO with unknown category"
  echo "$selected"
}

function count_todos_per_category {
  show_section "TODO count"
  for category in $CATEGORIES; do
    echo "  $(run_grep "$category" | wc -l) $category"
  done
  echo "  $(run_grep_unknown_category | wc -l) unknown"
}

function check_consistency {
  # check consistency with ../reflectable/doc/todos.md
  categories=$(grep '\* `' ../reflectable/doc/todos.md | sed -e 's/`:.*//' |\
    sed -e 's/ \* `//' | tr '\012' ' ')
  if [ "$categories" != "$CATEGORIES " ]; then
    echo "Inconsistency with 'todos.md', aborting!"
    exit -1
  fi
}

function help {
  echo -n "Usage: $0 [--help|-h] [--check-consistency|-c] "
  echo -n "[--count-number-of-todos|-n][--find-all-categories|-a]  "
  echo "[--find-unknown-category|-u] [--search-anywhere|-s] <category>..."
}

function parse_args {
  while [ -n "$1" ]; do
    case $1 in
      (--check-consistency|-c) check_consistency="true"; shift;;
      (--count-number-of-todos|-n) count_todos="true"; shift;;
      (--find-all-categories|-a) grep_all="true"; shift;;
      (--find-unknown-category|-u) find_unknown_category="true"; shift;;
      (--search-anywhere|-s) search_anywhere="true"; shift;;
      (--help|-h) help; exit 0;;
      (-*) help; echo "$0: Argument '$1' not understood. Exiting."; exit -1;;
      (*) shift;;
    esac
  done
}

function main {
  original_dir=$(pwd)
  # No matter how this script exits, go back do the original working directory.
  trap 'cd $original_dir' EXIT

  if [ "$#" -eq "0" ]; then help; exit 0; else parse_args "$@"; fi
  if [ "$check_consistency" = "true" ]; then check_consistency; fi
  if [ "$find_unknown_category" = "true" ]; then run_grep_unknown_category; fi
  if [ "$grep_all" = "true" ]; then run_grep_all; fi
  for category in "$@"; do
    if [ "${category:0:1}" = "-" ]; then continue; fi
    if [ "$search_anywhere" = "true" ]; then
      show_section "TODO $category"
      grep "TODO.*$category" $(run_find)
    else
      show_section "TODO category $category"
      run_grep "$category"
    fi
  done
  if [ "$count_todos" = "true" ]; then count_todos_per_category; fi
}

main "$@"
