// Copyright (c) 2016, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

library reflectable.test.mock_tests.check_literal_build_test;

/// Test the literal output of the build for a few simple cases.

import 'package:barback/barback.dart';
import "package:reflectable/test_build.dart";
import "package:reflectable/builder.dart";
import "package:test/test.dart";

var useReflect = [
  {
    "a|main.dart": """
import 'package:reflectable/reflectable.dart';
import 'main.reflectable.dart';

class MyReflectable extends Reflectable {
  const MyReflectable(): super(newInstanceCapability);
}

@MyReflectable()
class A {}

main() {
  initializeReflectable();
  InstanceMirror instanceMirror = myReflectable.reflect(new A());
}
"""
  },
  {
    "a|main.reflectable.dart": """
// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'main.dart' as prefix0;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_builder_based.dart" as r;

final _data = {
  const prefix0.MyReflectable(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"A",
            r".A",
            7,
            0,
            const prefix0.MyReflectable(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {r"": (b) => () => b ? new prefix0.A() : null},
            -1,
            -1,
            const <int>[-1],
            null,
            {})
      ],
      null,
      null,
      <Type>[prefix0.A],
      1,
      {},
      {},
      null,
      [
        const [0, 0, null]
      ])
};

final _memberSymbolMap = null;

initializeReflectable() {
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
"""
  }
];

const String package = "a";

checkBuild(List<Map<String, String>> maps) async {
  Map<String, String> inputs = maps[0];
  Map<String, String> expectedOutputs = maps[1];

  for (String inputName in inputs.keys) {
    String inputContents = inputs[inputName];
    TestBuild build =
        new TestBuild(inputName, inputContents, package);
    ReflectableBuilder builder =
        new ReflectableBuilder.asPlugin(new BarbackSettings({
      "entry_points": ["main.dart"],
      "formatted": true,
    }, BarbackMode.RELEASE));

    // Test `declareOutputs`.
    TestDeclaringBuild declaringBuild =
        new TestDeclaringBuild(inputName);
    builder.declareOutputs(declaringBuild);
    expect(declaringBuild.outputs, new Set.from(expectedOutputs.keys));
    expect(declaringBuild.consumed, false);

    testApply(ReflectableBuilder builder) async {
      await builder.apply(build);
      Map<String, String> outputs = await build.outputMap();
      if (build.messages.isNotEmpty) {
        // It is very difficult to detect what went wrong if, say, package-bots
        // fail here, so we print the messages so that they will be in the log.
        for (MessageRecord messageRecord in build.messages) {
          String level = null;
          switch (messageRecord.level) {
            case LogLevel.INFO:
              level = "Info";
              break;
            case LogLevel.FINE:
              level = "Fine";
              break;
            case LogLevel.WARNING:
              level = "Warning";
              break;
            case LogLevel.ERROR:
              level = "Error";
              break;
          }
          assert(level != null);
          print("[$level from check_literal_build_test]:\n"
              "${messageRecord.message}");
        }
      }
      expect(build.messages.isEmpty, true);
      expect(outputs.length, expectedOutputs.length);
      outputs.forEach((key, value) {
        // The error message is nicer when the strings are compared separately
        // instead of comparing Maps.
        expect(value, expectedOutputs[key]);
      });
    }

    // Test `apply`.
    await testApply(builder);

    // Test that the build process tolerates a duplicate entry point.
    ReflectableBuilder duplicateBuilder =
        new ReflectableBuilder.asPlugin(new BarbackSettings({
      "entry_points": ["main.dart", "main.dart"],
      "formatted": true,
    }, BarbackMode.RELEASE));
    await testApply(duplicateBuilder);
  }
}

main() async {
  test("Check builds", () async {
    await checkBuild(useReflect);
  });
}
